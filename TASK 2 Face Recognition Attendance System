train_faces.py
import face_recognition
import os
import cv2

def encode_faces(folder_path="known_faces"):
    known_encodings = []
    known_names = []

    for filename in os.listdir(folder_path):
        if filename.endswith(('.jpg', '.png')):
            image = face_recognition.load_image_file(f"{folder_path}/{filename}")
            encodings = face_recognition.face_encodings(image)
            if encodings:
                known_encodings.append(encodings[0])
                known_names.append(os.path.splitext(filename)[0])

    return known_encodings, known_names
main.py
import cv2
import face_recognition
import numpy as np
import pandas as pd
from datetime import datetime
from train_faces import encode_faces

known_encodings, known_names = encode_faces()

def mark_attendance(name):
    try:
        data = pd.read_csv("attendance.csv")
    except FileNotFoundError:
        data = pd.DataFrame(columns=["Name", "Time"])

    if name not in data["Name"].values:
        now = datetime.now()
        time_str = now.strftime("%H:%M:%S")
        data = data.append({"Name": name, "Time": time_str}, ignore_index=True)
        data.to_csv("attendance.csv", index=False)

video = cv2.VideoCapture(0)

while True:
    ret, frame = video.read()
    small_frame = cv2.resize(frame, (0, 0), fx=0.25, fy=0.25)
    rgb_small_frame = small_frame[:, :, ::-1]

    face_locations = face_recognition.face_locations(rgb_small_frame)
    face_encodings = face_recognition.face_encodings(rgb_small_frame, face_locations)

    for face_encoding, face_location in zip(face_encodings, face_locations):
        matches = face_recognition.compare_faces(known_encodings, face_encoding)
        name = "Unknown"

        face_distances = face_recognition.face_distance(known_encodings, face_encoding)
        best_match_index = np.argmin(face_distances)

        if matches[best_match_index]:
            name = known_names[best_match_index]
            mark_attendance(name)

        top, right, bottom, left = [v * 4 for v in face_location]
        cv2.rectangle(frame, (left, top), (right, bottom), (0, 255, 0), 2)
        cv2.putText(frame, name, (left, top - 10), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 255), 2)

    cv2.imshow("Face Attendance", frame)

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

video.release()
cv2.destroyAllWindows()
